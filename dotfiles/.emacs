;; Added by Package.el.  This must come before configurations of
;; installed packages.  Don't delete this line.  If you don't want it,
;; just comment it out by adding a semicolon to the start of the line.
;; You may delete these explanatory comments.
(require 'package)
(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                    (not (gnutls-available-p))))
       (proto (if no-ssl "http" "https")))
  (when no-ssl
    (warn "\
Your version of Emacs does not support SSL connections,
which is unsafe because it allows man-in-the-middle attacks.
There are two things you can do about this warning:
1. Install an Emacs version that does support SSL and be safe.
2. Remove this warning from your init file so you won't see it again."))
  ;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
  (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t))
;;(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t))
;; (when (< emacs-major-version 24)
;;   ;; For important compatibility libraries like cl-lib
;;   (add-to-list 'package-archives (cons "gnu" (concat proto "://elpa.gnu.org/packages/")))))
(package-initialize)

;; Remove audible bell and set visible bell flashing mode line
(require 'mode-line-bell)
(mode-line-bell-mode 1)
;; Cursor style
(setq-default cursor-type '(bar . 3))
;; Prevent clipboard contamination
(setq select-enable-clipboard nil)
;; Global prettify symbols: \\forall -> \forall (upside-down A) in LaTeX
(global-prettify-symbols-mode +1)
;; Ivy-mode stuff
(require 'ivy)
(ivy-mode 1)
(require 'ivy-rich)
(ivy-rich-mode 1)
(setq ivy-use-virtual-buffers t)
(setq enable-recursive-minibuffers t)
 (setq ivy-re-builders-alist
       '((ivy-switch-buffer . ivy--regex-plus)
         (t . ivy--regex-fuzzy)))
 (setq ivy-re-builders-alist
       '((t . ivy--regex-fuzzy)))
 (setq ivy-initial-inputs-alist nil)
;; Highlight the entire line the cursor is on
(global-hl-line-mode +1)
(with-eval-after-load 'company
  (company-flx-mode +1))
;; Mouse features in a TTY emulator
(setq xterm-mouse-mode t)
;; Disable gpm mousing that breaks scroling
;;(setq gpm-mouse-mode nil)
;;(setq gpm-mouse-mode t)
(require 'which-key)
(setq which-key-idle-delay 0)
(setq which-key-idle-secondary-delay 0)
(setq which-key-popup-type 'side-window)
(which-key-mode)
;; DISABLE toolbar
(tool-bar-mode -1)
;; Disable menubar
(menu-bar-mode -1)
;; Disable scroll bar
;;(setq-default scroll-bar-mode nil)
;; Borderless
(setq default-frame-alist '((undecorated . t)))
;; Font Settings
;; (set-face-attribute 'default t
;;                     :family "Source Code Pro"
;;                     :height 220)
;; System font
(setq font-use-system-font t)

;; Disable async-shell-command from spawning a buffer
(add-to-list 'display-buffer-alist
             (cons "\\*Async Shell Command\\*.*"
                   (cons #'display-buffer-no-window nil)))

;; Change word delimiters, Let _ and : constitute words
;;(modify-syntax-entry ?_ "w")
;;(modify-syntax-entry ?: "w")

;; Entry keyboard macro
;; (fset 'entry
;;    "\C-m\C-p\\entry{\C-u\C-[!date\C-m\C-e}\C-m\C-m")
;; (defun entry-latex (arg color)
;;   "Prints an entry for notes. Includes date generated by shell
;; command, and a paremeterized color"
;;   (interactive "p\nsEntry Color: ")
;;   (insert (format
;;            "\\begin{entry}{%s}{%s}\n\\label{entry:%s}\n\n\n\n\\end{entry}\n"
;;            color
;;            (shell-command-to-string
;;             "date --iso-8601='seconds' | tr -d '\n' ")
;;            (shell-command-to-string
;;             "date +%Y%m%d%H%M%S | tr -d '\n' ")
;;            ))
;;   (backward-char 14))
(defun entry-org ()
  "Prints an entry for notes. Includes date generated by shell
command, and a paremeterized color"
  (interactive)
  (insert (format
           "*** %s"
           (shell-command-to-string
            "date --iso-8601='seconds' | tr -d '\n' ")
           ))
  )

;; (use-package lsp-mode
;;   :ensure
;;   :commands lsp
;;   :custom
;;   ;; what to use when checking on-save. "check" is default, I prefer clippy
;;   (lsp-rust-analyzer-cargo-watch-command "clippy")
;;   (lsp-eldoc-render-all t)
;;   (lsp-idle-delay 0.6)
;;   (lsp-rust-analyzer-server-display-inlay-hints t)
;;   :config
;;   (add-hook 'lsp-mode-hook 'lsp-ui-mode))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Enable Ido mode errwhere
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; (setq ido-enable-flex-matching t)
;; (setq ido-everywhere t)
;; (setq ido-use-filename-at-point 'guess)
;; (ido-mode 1)

;; (defun ido-define-keys ()
;;   (define-key ido-completion-map (kbd "C-n") 'ido-next-match)
;;   (define-key ido-completion-map (kbd "C-p") 'ido-prev-match))
;; (add-hook 'ido-setup-hook 'ido-define-keys)

;; Indent guide
;; (require 'indent-guide)
;; (add-hook 'prog-mode-hook 'indent-guide-mode)
;; (add-hook 'ess-mode-hook 'indent-guide-mode)
;; (add-hook 'markdown-mode-hook 'indent-guide-mode)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Enable linum-mode unless file too large
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(add-hook 'prog-mode-hook 'line-number-mode)
;; (global-linum-mode 0)
;; (add-hook 'prog-mode-hook
;; 	  (lambda ()
;; 	    ;; turn off `linum-mode' when there are more than 5000 lines
;; 	    (if (buffer-too-big-p) (linum-mode -1)))
;; )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Auto Save backup directory
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(setq backup-directory-alist
      `(("." . ,(concat user-emacs-directory "backups"))))
(setq auto-save-file-name-transforms
      `((".*" ,(concat user-emacs-directory "backups") t)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ENCODING
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(prefer-coding-system 'utf-8-unix)
(set-default-coding-systems 'utf-8-unix)
(setq-default buffer-file-coding-system 'utf-8-unix)
;; Treat clipboard input as UTF-8 string first; compund text next, etc.
(setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; SET THEME
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; (advice-add #'x-apply-session-resources :override #'ignore)
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
(load-theme 'dracula t)
;;(load-theme 'sanityinc-tomorrow-night t)
;; Set background color
;;(add-to-list 'default-frame-alist '(background-color . "color-236"))
;; Don't display a background
;; (defun on-after-init ()
;;   (unless (display-graphic-p (selected-frame))
;;     (set-face-background 'default "unspecified-bg" (selected-frame))))
;; (add-hook 'window-setup-hook 'on-after-init)
;; (defun on-frame-open (frame)
;;   (if (not (display-graphic-p frame))
;;     (set-face-background 'default "unspecified-bg" frame)))
;; (on-frame-open (selected-frame))
;; (add-hook 'after-make-frame-functions 'on-frame-open)

(counsel-mode 1); Counsel mode everywhere
(global-visual-line-mode 1); Proper line wrapping
;; (global-hl-line-mode 1); Highlight current row
(show-paren-mode 1); Matches parentheses and such in every mode
;;(set-fringe-mode '(0 . 0)); Disable fringe because I use visual-line-mode
(setq inhibit-splash-screen t); Disable splash screen
;;(setq visible-bell nil); Flashes on error
(setq frame-background-mode 'dark)
;; Disable blinking cursor
(setq visible-cursor nil)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Proof General Package / Coq things
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Open .v files with Proof General's Coq mode
;;(load "~/.emacs.d/lisp/PG/generic/proof-site")
;; Load company-coq when opening Coq files
(add-hook 'coq-mode-hook #'company-coq-mode)
;; Pretty symbols with company-coq
(setq company-coq-features/prettify-symbols-in-terminal t)
;; Auto-complete externally defined symbols
(setq company-coq-live-on-the-edge t)
;; I appreciate the effort of writing a splash-screen, but the angry
;; general on the gif scares me.
(setq proof-splash-seen t)
;;; Hybrid mode is by far the best.
(setq proof-three-window-mode-policy 'hybrid)

;;; I don't know who wants to evaluate comments
;;; one-by-one, but I don't.
(setq proof-script-fly-past-comments t)

(with-eval-after-load 'coq
  ;; The most common command by far. Having a 3(!)
  ;; keys long sequence for this command is just a
  ;; crime.
  (define-key coq-mode-map "\C-c\M-n"
    'proof-assert-until-point-interactive)
  (defun insert_arrow () (interactive) (insert "->"))
  (define-key coq-mode-map (kbd "M--") #'insert_arrow)
  )

;; GDB Stuff
(add-to-list 'auto-mode-alist '("\\.gdb\\'" . gdb-script-mode))
             
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Sail highlighting package  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; (if (file-exists-p "~/.emacs.d/sail/")
;;     (progn
;;       (add-to-list 'load-path "~/.emacs.d/sail/")
;;       (load "sail-mode"))
;;   nil)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; LATEX STUFF
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Spell check when entering latex-mode
;;(add-hook 'tex-mode-hook #'flyspell-mode)
;(add-hook 'tex-mode-hook (lambda () (set-fill-column 70)))
(add-hook 'tex-mode-hook (lambda () (column-number-mode 1)))
(add-hook 'tex-mode-hook (lambda () (flyspell-buffer)))
(add-hook 'text-mode-hook (lambda () (flyspell-mode 1)))
;;(add-hook 'LaTeX-mode-hook 'turn-on-auto-fill)
;;(add-hook 'LaTeX-mode-hook 'flyspell-mode)
;(require 'olivetti)
;(add-hook 'LaTeX-mode-hook 'olivetti-mode)
(add-hook 'LaTeX-mode-hook (lambda () (set-fill-column 100000)))
(add-hook 'LaTeX-mode-hook (setq reftex-toc-include-file-boundaries t))
(add-hook 'LaTeX-mode-hook (setq reftex-toc-follow-mode 'nil))
;;(add-hook 'LaTeX-mode-hook (lambda () (flyspell-buffer)))
;; Needed for latex many packages
(setq TeX-parse-self t) ; Enable parse on load.
(setq TeX-auto-save t) ; Enable parse on save.
;; Use xetex (instead of pdflatex) 
;;(setq-default TeX-engine 'xetex)
;; Ask for master file when using \input
(setq-default TeX-master nil)
;; Set up reftex
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
(setq reftex-plug-into-AUCTeX t)
(setq reftex-bibliography-commands '("bibliography" "nobibliography" "addbibresource"))
;; (defun reftex-format-cref (label def-fmt reftype)
;;   (format "\\cref{%s}" label))
;;(setq reftex-format-ref-function 'reftex-format-cref)
;; Set default tex compiler
;(setq-default TeX-engine 'xetex)
;; Produce PDF by default 
;(setq-default TeX-PDF-mode t)
;; enable fold-mode by default in tex-files
;; (add-hook 'TeX-mode-hook (lambda ()
;;                            (progn
;;                              (TeX-fold-mode 1)
;;                              ;; Enable folding of cref
;;                              (add-to-list
;;                              'TeX-fold-macro-spec-list
;;                              '("[cr]" ("cref" "Cref")))
;;                              )))
;; Add lstlisting to the set of verbatim environments
(add-hook 'LaTeX-mode-hook (lambda () 
                             (add-to-list 'LaTeX-verbatim-environments "lstlisting")))
(setq reftex-bibliography-commands '("bibliography" "nobibliography" "addbibresource"))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Org Mode config
(font-lock-add-keywords 'org-mode
                        '(("^ *\\([-]\\) "
                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
(setq org-image-actual-width nil)
(custom-theme-set-faces
 'user
 '(org-block ((t (:inherit fixed-pitch))))
 '(org-table ((t (:inherit fixed-pitch))))
 '(org-code ((t (:inherit (shadow fixed-pitch)))))
 '(org-verbatim ((t (:inherit (shadow fixed-pitch)))))
 ;'(org-document-info ((t (:foreground "dark orange"))))
 '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
 '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
 ;'(org-link ((t (:foreground "royal blue" :underline t))))
 '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
 '(org-property-value ((t (:inherit fixed-pitch))) t)
 '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
 ;'(org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))
 ;'(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
 )


(setq org-hide-emphasis-markers t)
(setq org-fontify-whole-heading-line t)
(setq org-tags-column 0)
(require 'org-bullets)
(defun my-org-config ()
  (org-bullets-mode)
  (variable-pitch-mode 1)
  (set-face-attribute)
  (setq fill-column 100000) 
)
(add-hook 'org-mode-hook 'my-org-config)

;; GDB mode window config/layout file
(setq gdb-many-windows t)
(setq gdb-default-window-configuration-file "gdb_window_config")


(normal-erase-is-backspace-mode 0)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Fill Column
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;(setq-default fill-column 75)

;; Make _ a symbol constituent in the standard syntax table (inherited by most)
;; (modify-syntax-entry ?_ "_");; standard-syntax-table)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; C-Mode prettyness
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(setq-default c-basic-offset 2
              tab-width 2
              indent-tabs-mode nil)
(defun pretty-c ()
  (c-set-offset 'arglist-intro '+)
  (c-set-offset 'arglist-cont '0)
  (c-set-offset 'case-label '+))
(add-hook 'c-mode-hook 'pretty-c)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Verilog-Mode Stuff
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(add-hook 'verilog-mode-hook 
          (lambda () (local-set-key (kbd "M-*") 'pop-tag-mark)))

;; Set TAB to indent in bibtex-mode
(defun bibtex-mode-tab ()
  (local-set-key (kbd "TAB") 'indent-for-tab-command)
  (local-set-key (kbd "M-q") 'fill-individual-paragraphs)
  )
(add-hook 'bibtex-mode-hook 'bibtex-mode-tab)

;; Company mode for all buffers
(require 'company)
(add-hook 'after-init-hook 'global-company-mode)

;; (require 'mini-modeline)
;; (mini-modeline-mode t)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; STATIC KEYBINDINGS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(global-unset-key (kbd "C-x C-p"))
(global-unset-key (kbd "C-x C-n"))
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "M-i") 'ido-goto-symbol)
(global-set-key (kbd "C-o") 'other-window)
(global-set-key (kbd "M-r") 'replace-regexp)
(global-set-key (kbd "C-s") 'isearch-forward-regexp)
(global-set-key (kbd "C-r") 'isearch-backward-regexp)
(global-set-key (kbd "C-M-s") 'rgrep)
(global-set-key (kbd "C-x {") 'shrink-window)
(global-set-key (kbd "C-x }") 'enlarge-window)
(global-set-key (kbd "C-x [") 'shrink-window-horizontally)
(global-set-key (kbd "C-x ]") 'enlarge-window-horizontally)
(global-set-key (kbd "M-o") 'delete-other-windows)
(global-set-key (kbd "C-M-o") 'delete-window)
;;(global-set-key (kbd "M-j") 'point-to-register)
;;(global-set-key (kbd "C-j") 'jump-to-register)
(global-set-key (kbd "C-x C-b") 'ibuffer)
(global-set-key (kbd "C-x k") 'kill-current-buffer)
(global-set-key (kbd "C-x /") 'comment-line)
(global-set-key (kbd "C-x f") 'dedicated-mode)
(global-set-key (kbd "<f5>") 'revert-buffer)
(global-set-key (kbd "<f5>") 'revert-buffer)
(global-set-key (kbd "S-<f5>") 'revert-buffer-quick)
(global-set-key (kbd "C-x C-\\") 'goto-last-change)
(global-set-key (kbd "C-]") 'other-frame)
(global-set-key (kbd "C-S-v") 'clipboard-yank)
(global-set-key (kbd "C-S-v") 'clipboard-yank)
(global-set-key (kbd "C-S-c") 'clipboard-kill-ring-save)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; END
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(org-agenda-files '("~/notes/notes.org"))
 '(package-selected-packages
   '(proof-general unfill auctex graphviz-dot-mode yaml-mode which-key visual-ascii-mode vi-tilde-fringe spacemacs-theme scala-mode rust-mode rainbow-mode popup org-remark org-bullets olivetti mode-line-bell mini-modeline lsp-mode ivy-rich imenu-list hl-anything highlight helm-core go-mode gnu-elpa-keyring-update dracula-theme dedicated counsel company-flx company-auctex color-theme-sanityinc-tomorrow cmake-mode buffer-move autothemer)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(org-block ((t (:inherit fixed-pitch))))
 '(org-code ((t (:inherit (shadow fixed-pitch)))))
 '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
 '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
 '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
 '(org-property-value ((t (:inherit fixed-pitch))) t)
 '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
 '(org-table ((t (:inherit fixed-pitch))))
 '(org-verbatim ((t (:inherit (shadow fixed-pitch))))))
